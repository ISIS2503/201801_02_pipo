#include <ESP8266WiFi.h>

//DEFINES
#define SIZE_BUFFER_DATA       50

//VARIABLES
const char* idDevice = "Arduino007";
boolean     stringComplete = false;
boolean     init_flag = false;
String      inputString = "";
char        bufferData [SIZE_BUFFER_DATA];

// CLIENTE WIFI & MQTT
WiFiClient    clientWIFI;

// CONFIG WIFI
const char* ssid = "ssid";
const char* password = "pass";

// CONFIG MQTT
const str servidor= "172.42.24.33";
const int puerto = 8084;
// const char* usernameMQTT = "admin";
// const char* passwordMQTT = "admin";

void connectWIFI() {
  // Conectar a la red WiFi
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  while(!clientWIFI.connect(servidor, puerto)) {
    Serial.println("connection failed");
    delay(500);
  }  
  
  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println(WiFi.localIP());
}

void reconnectWIFI() {
  // Conectar a la red WiFi
  if(WiFi.status() != WL_CONNECTED) {
    WiFi.mode(WIFI_STA);
    WiFi.begin(ssid, password);
  }

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
  }
}

void setup() {
  Serial.begin(9600);
  inputString.reserve(100); 
  connectWIFI();
  delay(1000);
}




void processData() {
  if (WiFi.status() == WL_CONNECTED) {
    if(stringComplete)
    {
     clientWIFI.println(inputString);
     inputString = "";
     stringComplete = false;
    }
  }

void receiveData() {
  while (Serial.available()) {
    // get the new byte:
    char inChar = (char)Serial.read();
    // add it to the inputString:
    inputString += inChar;
    // if the incoming character is a newline, set a flag
    // so the main loop can do something about it:
    if (inChar == '\n') {
      inputString.toCharArray(bufferData, SIZE_BUFFER_DATA);
      stringComplete = true;
    }
  }
}

void loop() {

  receiveData();
  processData();
 while (clientWIFI.available()) {
    String line = clientWIFI.readStringUntil('\n');
    Serial.println(line);
  }
}
