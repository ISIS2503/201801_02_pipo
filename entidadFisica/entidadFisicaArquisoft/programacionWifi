#include <PubSubClient.h>
#include <ESP8266WiFi.h>
 
//DEFINES
#define TOPIC_SUBSCRIBE        "Arduino007.recibir"
#define TOPIC_PUBLISH          "Arduino007.envio"
#define SIZE_BUFFER_DATA       50
 
//VARIABLES
String  idDevice = "Arduino007";
boolean stringComplete = false;
boolean init_flag = false;
String  inputString = "";
char    bufferData [SIZE_BUFFER_DATA];
 
// WIFI & MQTT CLIENT
WiFiClientSecure clientWIFI;
PubSubClient     clientMQTT(clientWIFI);
 
// CONFIG WIFI
const char* ssid = "isis2503";
const char* password = "Yale2018.";
 
// CONFIG SECURITY - SSL
unsigned char m2mqtt_ca_bin_crt[] = {
  0x30, 0x82, 0x03, 0xff, 0x30, 0x82, 0x02, 0xe7, 0xa0, 0x03, 0x02, 0x01,
  0x02, 0x02, 0x09, 0x00, 0xee, 0xbb, 0xd3, 0xd2, 0xba, 0xf1, 0x22, 0x0c,
  0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01,
  0x0b, 0x05, 0x00, 0x30, 0x81, 0x95, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03,
  0x55, 0x04, 0x06, 0x13, 0x02, 0x43, 0x4f, 0x31, 0x0f, 0x30, 0x0d, 0x06,
  0x03, 0x55, 0x04, 0x08, 0x0c, 0x06, 0x42, 0x6f, 0x67, 0x6f, 0x74, 0x61,
  0x31, 0x0f, 0x30, 0x0d, 0x06, 0x03, 0x55, 0x04, 0x07, 0x0c, 0x06, 0x42,
  0x6f, 0x67, 0x6f, 0x74, 0x61, 0x31, 0x11, 0x30, 0x0f, 0x06, 0x03, 0x55,
  0x04, 0x0a, 0x0c, 0x08, 0x55, 0x6e, 0x69, 0x61, 0x6e, 0x64, 0x65, 0x73,
  0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x0b, 0x0c, 0x0a, 0x49,
  0x6e, 0x67, 0x65, 0x6e, 0x69, 0x65, 0x72, 0x69, 0x61, 0x31, 0x12, 0x30,
  0x10, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x09, 0x41, 0x72, 0x71, 0x75,
  0x69, 0x73, 0x6f, 0x66, 0x74, 0x31, 0x28, 0x30, 0x26, 0x06, 0x09, 0x2a,
  0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x09, 0x01, 0x16, 0x19, 0x73, 0x2e,
  0x67, 0x75, 0x7a, 0x6d, 0x61, 0x6e, 0x6d, 0x40, 0x75, 0x6e, 0x69, 0x61,
  0x6e, 0x64, 0x65, 0x73, 0x2e, 0x65, 0x64, 0x75, 0x2e, 0x63, 0x6f, 0x30,
  0x1e, 0x17, 0x0d, 0x31, 0x38, 0x30, 0x34, 0x32, 0x30, 0x32, 0x31, 0x33,
  0x33, 0x30, 0x36, 0x5a, 0x17, 0x0d, 0x32, 0x38, 0x30, 0x34, 0x31, 0x37,
  0x32, 0x31, 0x33, 0x33, 0x30, 0x36, 0x5a, 0x30, 0x81, 0x95, 0x31, 0x0b,
  0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x43, 0x4f, 0x31,
  0x0f, 0x30, 0x0d, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x06, 0x42, 0x6f,
  0x67, 0x6f, 0x74, 0x61, 0x31, 0x0f, 0x30, 0x0d, 0x06, 0x03, 0x55, 0x04,
  0x07, 0x0c, 0x06, 0x42, 0x6f, 0x67, 0x6f, 0x74, 0x61, 0x31, 0x11, 0x30,
  0x0f, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x08, 0x55, 0x6e, 0x69, 0x61,
  0x6e, 0x64, 0x65, 0x73, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04,
  0x0b, 0x0c, 0x0a, 0x49, 0x6e, 0x67, 0x65, 0x6e, 0x69, 0x65, 0x72, 0x69,
  0x61, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x09,
  0x41, 0x72, 0x71, 0x75, 0x69, 0x73, 0x6f, 0x66, 0x74, 0x31, 0x28, 0x30,
  0x26, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x09, 0x01,
  0x16, 0x19, 0x73, 0x2e, 0x67, 0x75, 0x7a, 0x6d, 0x61, 0x6e, 0x6d, 0x40,
  0x75, 0x6e, 0x69, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x2e, 0x65, 0x64, 0x75,
  0x2e, 0x63, 0x6f, 0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a,
  0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82,
  0x01, 0x0f, 0x00, 0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00,
  0xb7, 0xd5, 0xf8, 0xe8, 0x38, 0x0e, 0xe2, 0x61, 0x69, 0xb0, 0xd0, 0x38,
  0x34, 0xa1, 0x8a, 0x42, 0x5d, 0x66, 0xdb, 0x4d, 0x2a, 0x59, 0x3e, 0x3b,
  0x24, 0xbe, 0x99, 0x59, 0xad, 0x4e, 0x2e, 0x98, 0x9f, 0xa5, 0xeb, 0x61,
  0x1d, 0x0c, 0x18, 0xa8, 0xa1, 0x09, 0x82, 0x86, 0x75, 0x9b, 0x3d, 0x47,
  0x64, 0x85, 0x60, 0xda, 0xd0, 0x8e, 0xf6, 0x66, 0xcd, 0xbc, 0x79, 0x76,
  0x37, 0x54, 0x14, 0x6a, 0xdb, 0xa5, 0xbd, 0xaa, 0xdc, 0xe2, 0x70, 0x6c,
  0x2f, 0xc8, 0x93, 0xe9, 0x25, 0x1e, 0x7e, 0xe8, 0xe0, 0xa0, 0xcc, 0xf2,
  0x94, 0x59, 0xe7, 0x31, 0x9e, 0x39, 0xe6, 0x45, 0xcd, 0x23, 0x92, 0xd8,
  0x6d, 0x0f, 0x9f, 0xcf, 0xf3, 0x78, 0x59, 0x90, 0xb1, 0x17, 0xeb, 0x7f,
  0x9a, 0x47, 0x39, 0x68, 0xf2, 0xef, 0x4c, 0x0b, 0xbc, 0x1a, 0xeb, 0xf9,
  0x92, 0xab, 0x93, 0x63, 0x72, 0x64, 0xa7, 0x76, 0xcb, 0x3a, 0x94, 0x81,
  0xad, 0x35, 0xc7, 0x7d, 0x11, 0x91, 0x89, 0xa8, 0xbc, 0xa0, 0x60, 0x98,
  0x43, 0x39, 0x62, 0xfa, 0xf7, 0x86, 0x10, 0xdf, 0x3a, 0x0f, 0x51, 0x08,
  0xfc, 0x90, 0xd6, 0xaa, 0xda, 0xd6, 0xfa, 0x6e, 0xfc, 0x2c, 0x8c, 0xa8,
  0xc5, 0xa9, 0x91, 0x0c, 0xab, 0x0e, 0xc7, 0x4f, 0xe8, 0x70, 0x61, 0x1a,
  0xac, 0xa9, 0xcc, 0x0f, 0x63, 0xad, 0x0b, 0x8e, 0xa4, 0xee, 0x04, 0xa9,
  0xe2, 0x07, 0x73, 0xa8, 0x88, 0xce, 0x68, 0xc8, 0xaf, 0x88, 0x6f, 0x1b,
  0x89, 0x3c, 0xfb, 0x06, 0x5a, 0x6c, 0xd0, 0x91, 0x7b, 0x7c, 0x74, 0xd0,
  0x56, 0x0d, 0x7b, 0x46, 0xca, 0xb1, 0x7e, 0x3a, 0xf0, 0x8e, 0x5f, 0x8c,
  0x59, 0xa7, 0xe1, 0x6c, 0xf6, 0x9d, 0x74, 0x42, 0xfc, 0x23, 0xa2, 0xde,
  0x0b, 0x84, 0x3b, 0x85, 0xff, 0x4e, 0x2a, 0x14, 0xd0, 0x8b, 0x4e, 0x1a,
  0x25, 0x5b, 0xbc, 0x5f, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x50, 0x30,
  0x4e, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14,
  0x52, 0x7b, 0xe8, 0xf5, 0xa2, 0xde, 0xc2, 0x61, 0xaf, 0x42, 0x85, 0x9d,
  0x8a, 0x09, 0x34, 0x97, 0x9c, 0x3a, 0x6d, 0x99, 0x30, 0x1f, 0x06, 0x03,
  0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x52, 0x7b, 0xe8,
  0xf5, 0xa2, 0xde, 0xc2, 0x61, 0xaf, 0x42, 0x85, 0x9d, 0x8a, 0x09, 0x34,
  0x97, 0x9c, 0x3a, 0x6d, 0x99, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x1d, 0x13,
  0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30, 0x0d, 0x06, 0x09, 0x2a,
  0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x03, 0x82,
  0x01, 0x01, 0x00, 0x98, 0x08, 0x14, 0xe8, 0xff, 0xc1, 0xf9, 0x47, 0xe9,
  0xf9, 0x82, 0x51, 0xbe, 0x93, 0xca, 0xde, 0x32, 0x15, 0x06, 0x21, 0x87,
  0xe8, 0x86, 0x06, 0x36, 0xa5, 0x01, 0xf9, 0x6e, 0x57, 0xbe, 0xd5, 0x2f,
  0x5c, 0x27, 0x5b, 0x7a, 0x90, 0x3f, 0x13, 0x1e, 0x51, 0x75, 0x46, 0x84,
  0x8d, 0xfd, 0x3f, 0xb5, 0xb3, 0x84, 0x30, 0x82, 0x15, 0x2e, 0x33, 0xe1,
  0x2c, 0xc8, 0x70, 0x43, 0xec, 0x5d, 0x3b, 0xa2, 0x52, 0x47, 0xe8, 0x1c,
  0x15, 0xc1, 0x05, 0x18, 0x2d, 0x69, 0x39, 0x32, 0x55, 0x0b, 0x70, 0x36,
  0x3c, 0x8f, 0xda, 0x5d, 0x45, 0x13, 0x99, 0x6e, 0x77, 0x3b, 0xaa, 0xe3,
  0xd1, 0xbb, 0x60, 0x33, 0x4d, 0xb3, 0xfc, 0x4f, 0x99, 0xff, 0x40, 0x3c,
  0xc5, 0x58, 0x13, 0xe6, 0x86, 0xc1, 0xa9, 0xaa, 0xd5, 0xbd, 0x84, 0x7f,
  0xde, 0xc0, 0x12, 0xb3, 0x39, 0x90, 0xa4, 0x51, 0xc3, 0x46, 0xea, 0x58,
  0x7c, 0x2e, 0x41, 0xd1, 0x44, 0x3a, 0x1f, 0x48, 0xc2, 0x7b, 0xc4, 0x74,
  0xb7, 0x89, 0x52, 0xe1, 0xee, 0xd2, 0x90, 0x89, 0xc5, 0x62, 0xa0, 0xd5,
  0x79, 0xcf, 0x93, 0x94, 0x18, 0x9d, 0xcd, 0x55, 0xca, 0x28, 0x89, 0x89,
  0xdd, 0xb5, 0xb6, 0xd1, 0xcc, 0xb9, 0x12, 0x21, 0x23, 0x09, 0x69, 0x7b,
  0x71, 0xa3, 0x03, 0xc0, 0x25, 0x85, 0x28, 0xf9, 0xc5, 0x30, 0x47, 0x85,
  0x6a, 0xe0, 0xda, 0xe2, 0x8d, 0x79, 0x9b, 0x80, 0x48, 0x76, 0x45, 0x20,
  0x3a, 0x76, 0x7f, 0xd0, 0x5d, 0xf2, 0xd7, 0xcd, 0x90, 0xaa, 0x41, 0xe7,
  0x99, 0xc0, 0x8a, 0xe5, 0xe8, 0x7c, 0x78, 0x51, 0x75, 0xbd, 0x31, 0x5b,
  0x82, 0x1b, 0x81, 0xda, 0x62, 0x74, 0xb2, 0x4f, 0xb0, 0x0a, 0x2f, 0x50,
  0xc8, 0x33, 0x46, 0xe1, 0x81, 0x40, 0x8b, 0xaa, 0xda, 0x95, 0x84, 0x29,
  0x4d, 0x6d, 0xf3, 0xdd, 0x32, 0x85, 0xc4
};
unsigned int m2mqtt_ca_bin_crt_len = 1027;
 
// CONFIG MQTT
IPAddress serverMQTT (172, 24, 41, 182);
const uint16_t portMQTT = 8083;
const char* usernameMQTT = "microcontrolador";
const char* passwordMQTT = "Isis2503.";
 
// FUNCTIONS
String macToStr(const uint8_t* mac) {
  String result;
  for (int i = 0; i < 6; ++i) {
    result += String(mac[i], 16);
    if (i < 5)
      result += ':';
  }
  return result;
}
 
void connectWIFI() {
  // Conectar a la red WiFi
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
 
  WiFi.mode(WIFI_STA);
  if(WiFi.status() != WL_CONNECTED) {
    WiFi.begin(ssid, password);
  }
 
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("WiFi connected");
 
  // Obtain MAC Address
  uint8_t mac[6];
  WiFi.macAddress(mac);
  idDevice = macToStr(mac);
  Serial.print("MAC Address: ");
  Serial.println(idDevice);
 
  // Obtain IP Address
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());
}
 
void reconnectWIFI() {
  // Conectar a la red WiFi
  if(WiFi.status() != WL_CONNECTED) {
    WiFi.begin(ssid, password);
  }
 
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
  }
}
 
void callback(char* topic, byte* payload, unsigned int length) {
  Serial.write(payload, length);
  Serial.println();
}
 
void setup() {
  Serial.begin(9600);
  inputString.reserve(100);
 
  clientWIFI.setCACert(m2mqtt_ca_bin_crt, m2mqtt_ca_bin_crt_len);
 
  clientMQTT.setServer(serverMQTT, portMQTT);
  clientMQTT.setCallback(callback);
  connectWIFI();
  delay(1000);
}
 
void processData() {
  if (WiFi.status() == WL_CONNECTED) {
    if(init_flag == false) {
      init_flag = true;
 
      boolean conectMQTT = false;
      if (!clientMQTT.connected()) {
        if (!clientMQTT.connect(idDevice.c_str(), usernameMQTT, passwordMQTT)) {
          conectMQTT = false;
        }
        conectMQTT = true;
      }
      else {
        conectMQTT = true;
      }
 
      if(conectMQTT) {
        if(clientMQTT.subscribe(TOPIC_SUBSCRIBE)) {
          // Serial.println("Subscribe OK");
        }
      }
    }
 
    if (stringComplete && clientMQTT.connected()) {
      if(clientMQTT.publish(TOPIC_PUBLISH, bufferData)) {
        inputString = "";
        stringComplete = false;
      }
      init_flag = false;
    }
  }
  else {
    reconnectWIFI();
    init_flag = false;
  }
  clientMQTT.loop();
}
 
void receiveData() {
  while (Serial.available()) {
    // get the new byte:
    char inChar = (char)Serial.read();
    // add it to the inputString:
    inputString += inChar;
    if (inChar == '\n') {
      inputString.toCharArray(bufferData, SIZE_BUFFER_DATA);
      stringComplete = true;
    }
  }
}
 
void loop() {
  receiveData();
  processData();
}
